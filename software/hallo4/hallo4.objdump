
hallo4.elf:     file format elf32-littlenios2
hallo4.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02001020

Program Header:
    LOAD off    0x00001000 vaddr 0x02001000 paddr 0x02001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02001020 paddr 0x02001020 align 2**12
         filesz 0x00000234 memsz 0x00000234 flags r-x
    LOAD off    0x00001254 vaddr 0x02001254 paddr 0x02001258 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000125c vaddr 0x0200125c paddr 0x0200125c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02001000  02001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  02001020  02001020  00001258  2**0
                  CONTENTS
  2 .text         0000021c  02001020  02001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0200123c  0200123c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  02001254  02001258  00001254  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0200125c  0200125c  0000125c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  02001268  02001268  00001258  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  00001280  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000b40  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000063b  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000713  00000000  00000000  00002563  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000190  00000000  00000000  00002c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000005ce  00000000  00000000  00002e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000101  00000000  00000000  000033d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000034d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  000034e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000042e6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000042e9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000042f5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000042f6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000042f7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00004302  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000430d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00004318  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000037  00000000  00000000  00004322  2**0
                  CONTENTS, READONLY
 26 .jdi          00005123  00000000  00000000  00004359  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00039a3a  00000000  00000000  0000947c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02001000 l    d  .entry	00000000 .entry
02001020 l    d  .exceptions	00000000 .exceptions
02001020 l    d  .text	00000000 .text
0200123c l    d  .rodata	00000000 .rodata
02001254 l    d  .rwdata	00000000 .rwdata
0200125c l    d  .bss	00000000 .bss
02001268 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hallo4_bsp//obj/HAL/src/crt0.o
02001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
02001154 g     F .text	0000002c alt_main
02001258 g       *ABS*	00000000 __flash_rwdata_start
02001180 g     F .text	00000038 alt_putstr
02001218 g     F .text	00000008 altera_nios2_gen2_irq_init
02001000 g     F .entry	0000000c __reset
02001020 g       *ABS*	00000000 __flash_exceptions_start
02001260 g     O .bss	00000004 alt_argv
02009254 g       *ABS*	00000000 _gp
02001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
02001268 g       *ABS*	00000000 __bss_end
02001210 g     F .text	00000004 alt_dcache_flush_all
02001258 g       *ABS*	00000000 __ram_rwdata_end
02001254 g       *ABS*	00000000 __ram_rodata_end
02001254 g     O .rwdata	00000004 jtag_uart_0
02001268 g       *ABS*	00000000 end
02002000 g       *ABS*	00000000 __alt_stack_pointer
020011dc g     F .text	00000034 altera_avalon_jtag_uart_write
02001020 g     F .text	0000003c _start
020011d8 g     F .text	00000004 alt_sys_init
02001254 g       *ABS*	00000000 __ram_rwdata_start
0200123c g       *ABS*	00000000 __ram_rodata_start
02001268 g       *ABS*	00000000 __alt_stack_base
0200125c g       *ABS*	00000000 __bss_start
0200105c g     F .text	00000018 main
0200125c g     O .bss	00000004 alt_envp
0200123c g       *ABS*	00000000 __flash_rodata_start
020011b8 g     F .text	00000020 alt_irq_init
02001264 g     O .bss	00000004 alt_argc
02001020 g       *ABS*	00000000 __ram_exceptions_start
02001258 g       *ABS*	00000000 _edata
02001268 g       *ABS*	00000000 _end
02001020 g       *ABS*	00000000 __ram_exceptions_end
02002000 g       *ABS*	00000000 __alt_data_end
0200100c g       .entry	00000000 _exit
02001220 g     F .text	0000001c strlen
02001214 g     F .text	00000004 alt_icache_flush_all
02001074 g     F .text	000000e0 alt_load



Disassembly of section .entry:

02001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2001000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2001004:	08440814 	ori	at,at,4128
    jmp r1
 2001008:	0800683a 	jmp	at

0200100c <_exit>:
	...

Disassembly of section .text:

02001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2001020:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 2001024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
 2001028:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 200102c:	d6a49514 	ori	gp,gp,37460
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2001030:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 2001034:	10849714 	ori	r2,r2,4700

    movhi r3, %hi(__bss_end)
 2001038:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 200103c:	18c49a14 	ori	r3,r3,4712

    beq r2, r3, 1f
 2001040:	10c00326 	beq	r2,r3,2001050 <_start+0x30>

0:
    stw zero, (r2)
 2001044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2001048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200104c:	10fffd36 	bltu	r2,r3,2001044 <_gp+0xffff7df0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2001050:	20010740 	call	2001074 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2001054:	20011540 	call	2001154 <alt_main>

02001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2001058:	003fff06 	br	2001058 <_gp+0xffff7e04>

0200105c <main>:
#include <unistd.h>
#include <io.h>

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
 200105c:	01008034 	movhi	r4,512
#include "sys/alt_stdio.h"
#include <unistd.h>
#include <io.h>

int main()
{ 
 2001060:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
 2001064:	21048f04 	addi	r4,r4,4668
#include "sys/alt_stdio.h"
#include <unistd.h>
#include <io.h>

int main()
{ 
 2001068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
 200106c:	20011800 	call	2001180 <alt_putstr>
 2001070:	003fff06 	br	2001070 <_gp+0xffff7e1c>

02001074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2001074:	deffff04 	addi	sp,sp,-4
 2001078:	01008034 	movhi	r4,512
 200107c:	01408034 	movhi	r5,512
 2001080:	dfc00015 	stw	ra,0(sp)
 2001084:	21049504 	addi	r4,r4,4692
 2001088:	29449604 	addi	r5,r5,4696

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 200108c:	2140061e 	bne	r4,r5,20010a8 <alt_load+0x34>
 2001090:	01008034 	movhi	r4,512
 2001094:	01408034 	movhi	r5,512
 2001098:	21040804 	addi	r4,r4,4128
 200109c:	29440804 	addi	r5,r5,4128
 20010a0:	2140121e 	bne	r4,r5,20010ec <alt_load+0x78>
 20010a4:	00000b06 	br	20010d4 <alt_load+0x60>
 20010a8:	00c08034 	movhi	r3,512
 20010ac:	18c49604 	addi	r3,r3,4696
 20010b0:	1907c83a 	sub	r3,r3,r4
 20010b4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 20010b8:	10fff526 	beq	r2,r3,2001090 <_gp+0xffff7e3c>
    {
      *to++ = *from++;
 20010bc:	114f883a 	add	r7,r2,r5
 20010c0:	39c00017 	ldw	r7,0(r7)
 20010c4:	110d883a 	add	r6,r2,r4
 20010c8:	10800104 	addi	r2,r2,4
 20010cc:	31c00015 	stw	r7,0(r6)
 20010d0:	003ff906 	br	20010b8 <_gp+0xffff7e64>
 20010d4:	01008034 	movhi	r4,512
 20010d8:	01408034 	movhi	r5,512
 20010dc:	21048f04 	addi	r4,r4,4668
 20010e0:	29448f04 	addi	r5,r5,4668

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 20010e4:	2140101e 	bne	r4,r5,2001128 <alt_load+0xb4>
 20010e8:	00000b06 	br	2001118 <alt_load+0xa4>
 20010ec:	00c08034 	movhi	r3,512
 20010f0:	18c40804 	addi	r3,r3,4128
 20010f4:	1907c83a 	sub	r3,r3,r4
 20010f8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 20010fc:	10fff526 	beq	r2,r3,20010d4 <_gp+0xffff7e80>
    {
      *to++ = *from++;
 2001100:	114f883a 	add	r7,r2,r5
 2001104:	39c00017 	ldw	r7,0(r7)
 2001108:	110d883a 	add	r6,r2,r4
 200110c:	10800104 	addi	r2,r2,4
 2001110:	31c00015 	stw	r7,0(r6)
 2001114:	003ff906 	br	20010fc <_gp+0xffff7ea8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2001118:	20012100 	call	2001210 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 200111c:	dfc00017 	ldw	ra,0(sp)
 2001120:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 2001124:	20012141 	jmpi	2001214 <alt_icache_flush_all>
 2001128:	00c08034 	movhi	r3,512
 200112c:	18c49504 	addi	r3,r3,4692
 2001130:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 2001134:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2001138:	18bff726 	beq	r3,r2,2001118 <_gp+0xffff7ec4>
    {
      *to++ = *from++;
 200113c:	114f883a 	add	r7,r2,r5
 2001140:	39c00017 	ldw	r7,0(r7)
 2001144:	110d883a 	add	r6,r2,r4
 2001148:	10800104 	addi	r2,r2,4
 200114c:	31c00015 	stw	r7,0(r6)
 2001150:	003ff906 	br	2001138 <_gp+0xffff7ee4>

02001154 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2001154:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2001158:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200115c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2001160:	20011b80 	call	20011b8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2001164:	20011d80 	call	20011d8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 2001168:	d1a00217 	ldw	r6,-32760(gp)
 200116c:	d1600317 	ldw	r5,-32756(gp)
 2001170:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 2001174:	dfc00017 	ldw	ra,0(sp)
 2001178:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 200117c:	200105c1 	jmpi	200105c <main>

02001180 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 2001180:	defffe04 	addi	sp,sp,-8
 2001184:	dc000015 	stw	r16,0(sp)
 2001188:	dfc00115 	stw	ra,4(sp)
 200118c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 2001190:	20012200 	call	2001220 <strlen>
 2001194:	01008034 	movhi	r4,512
 2001198:	000f883a 	mov	r7,zero
 200119c:	100d883a 	mov	r6,r2
 20011a0:	800b883a 	mov	r5,r16
 20011a4:	21049504 	addi	r4,r4,4692
#else
    return fputs(str, stdout);
#endif
#endif
}
 20011a8:	dfc00117 	ldw	ra,4(sp)
 20011ac:	dc000017 	ldw	r16,0(sp)
 20011b0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 20011b4:	20011dc1 	jmpi	20011dc <altera_avalon_jtag_uart_write>

020011b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 20011b8:	deffff04 	addi	sp,sp,-4
 20011bc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 20011c0:	20012180 	call	2001218 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 20011c4:	00800044 	movi	r2,1
 20011c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 20011cc:	dfc00017 	ldw	ra,0(sp)
 20011d0:	dec00104 	addi	sp,sp,4
 20011d4:	f800283a 	ret

020011d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 20011d8:	f800283a 	ret

020011dc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 20011dc:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 20011e0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 20011e4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 20011e8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 20011ec:	2980072e 	bgeu	r5,r6,200120c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 20011f0:	38c00037 	ldwio	r3,0(r7)
 20011f4:	18ffffec 	andhi	r3,r3,65535
 20011f8:	183ffc26 	beq	r3,zero,20011ec <_gp+0xffff7f98>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 20011fc:	28c00007 	ldb	r3,0(r5)
 2001200:	20c00035 	stwio	r3,0(r4)
 2001204:	29400044 	addi	r5,r5,1
 2001208:	003ff806 	br	20011ec <_gp+0xffff7f98>

  return count;
}
 200120c:	f800283a 	ret

02001210 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2001210:	f800283a 	ret

02001214 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2001214:	f800283a 	ret

02001218 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 2001218:	000170fa 	wrctl	ienable,zero
 200121c:	f800283a 	ret

02001220 <strlen>:
 2001220:	2005883a 	mov	r2,r4
 2001224:	10c00007 	ldb	r3,0(r2)
 2001228:	18000226 	beq	r3,zero,2001234 <strlen+0x14>
 200122c:	10800044 	addi	r2,r2,1
 2001230:	003ffc06 	br	2001224 <_gp+0xffff7fd0>
 2001234:	1105c83a 	sub	r2,r2,r4
 2001238:	f800283a 	ret
